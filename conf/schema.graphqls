# Kafka Cluster input details
input ClusterInput{
  # Data center where the kafka cluster belongs to
  datacenter: String!
  # Alias for the kafka cluster
  alias: String!
  # Kafka Broker host list, separated by comma
  bootstrapServers: String!
}

type Cluster {
  # Datacenter identifier
  datacenter: String
  # kafkaBroker host separated by comma(,) for the given cluster
  bootstrapServers: String
  # Alias or helping text for cluster identification
  alias: String
  # Collection of topics from the cluster
  topics: [Topic]
  kafkaBrokers: [KafkaBroker]
}

type Consumer {
  # Name of the consumer group
  group: String
  # Count of the topics in the associated group
  topicCount: Int
  # Registered topics for the consumer group
  topics: [Topic]
}

type KafkaBroker {
  # broker id
  id: Int
  hostname: String
  port: Int
  # kafka broker node rack identifier
  rack: String
  metrics: String
}

type Zookeeper {
  hostname: String
  latency: Int
  isLeader: Boolean
  metrics: JSON
}

# Kafka Topic details
type Topic {
  name: String
  # no of partitions available for that topic. Messages in a partition is ordered(a perfect queue FIFO).
  noOfPartitions: Int
  # tells whether the topic internal to kafka or not
  isInternal: Boolean
  # details about topic partition
  partitions:[Partition]
}

# kafka topic partition details
type Partition {
    # assigned partition id
    id: Int
    # Assigned leader node
    leader: KafkaBroker
    # Nodes containing replicas of partition
    replicas: [KafkaBroker]
    # Nodes containing in sync replicas of partition
    isr: [KafkaBroker]
    # Latest offset, where the latest message gets added in.
    latestOffset: Int
    # Earliest offset, where the earliest(first) message is in. Difference between latest offset and Earliest offset will give the total number of  messages.
    earliestOffset: Int
}

type Query {
   # Get all clusters
   clusters: [Cluster]
   # Get details about a cluster
   cluster(clusterInput: ClusterInput): Cluster
}

